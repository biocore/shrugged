rule sourmash_sig:
    """
    Create a minhash signature for the input forward and reverse fastq read files of every sample.
    """
    input:
        forward = qc_dir + "{sample}/filtered/{sample}.R1.trimmed.filtered.fastq.gz",
        reverse = qc_dir + "{sample}/filtered/{sample}.R2.trimmed.filtered.fastq.gz"
    output:
        sketch = distance_dir + '{sample}/sourmash/{sample}.sig'
    params:
        env = config['envs']['distance'],
        scaled = config['params']['sourmash']['scaled'],
        kmer = config['params']['sourmash']['kmer']
    threads:
        1
    log:
        distance_dir + "logs/sourmash_sig.sample=[{sample}].log"
    benchmark:
        "benchmarks/distance/sourmash_sig.sample=[{sample}].txt"
    run:
        with tempfile.TemporaryDirectory(dir=TMP_DIR_ROOT) as temp_dir:
            shell("""
                  set +u; {params.env}; set -u
                  zcat {input.forward} {input.reverse} > {temp_dir}/{wildcards.sample}
                  sourmash compute --scaled {params.scaled} -k {params.kmer} -o {output[0]}
                  """)

rule sourmash_dm:
    '''Compare and create a distance matrix between samples. '''
    input:
        expand(distance_dir + '{sample}/sourmash/{sample}.sig', sample=samples)
    output:
        distance_dir + 'combined_analysis/sourmash.similarity.csv',
        distance_dir + 'combined_analysis/sourmash.dist.dm'
    log:
        distance_dir + "logs/sourmash_dm.log"
    benchmark:
        "benchmarks/distance/sourmash_dm.txt"
    run:
        from skbio.stats.distance import DistanceMatrix
        from skbio.io import write
        import pandas as pd
        import numpy as np
        shell('''
            set +u; {params.env}; set -u
            sourmash compare {i} --csv {output[0]}'''.format(i=' '.join(input)))
        sim = pd.read_csv(output[0])
        ids = sim.columns
        dist = (1 - sim).values
        # because numerical overflow, set diagonal to zero explicitly
        np.fill_diagonal(dist, 0)
        dm = DistanceMatrix(dist, ids=ids)
        dm.write(output[1])


rule sourmash:
    input:
        expand(rules.sourmash_sig.output, sample=samples),
        rules.sourmash_dm.output
